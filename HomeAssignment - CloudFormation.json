{
    "Resources":  {                      
                      "VPC":  {
                                  "Properties":  {
                                                     "InstanceTenancy":  "default",
                                                     "Tags":  [
                                                                  {
                                                                      "Key":  "Name",
                                                                      "Value":  "Assignment_VPC"
                                                                  }
                                                              ],
                                                     "EnableDnsSupport":  "true",
                                                     "EnableDnsHostnames":  "true",
                                                     "CidrBlock":  "10.200.0.0/21"
                                                 },
                                  "Type":  "AWS::EC2::VPC"
                              },
							                       
                      "PrivateRoute":  {
                                           "Properties":  {
                                                              "RouteTableId":  {
                                                                                   "Ref":  "PrivateRouteTable"
                                                                               },
                                                              "NatGatewayId":  {
                                                                                   "Ref":  "NAT1"
                                                                               },
                                                              "DestinationCidrBlock":  "0.0.0.0/0"
                                                          },
                                           "DependsOn":  "NAT1",
                                           "Type":  "AWS::EC2::Route"
                                      }, 
                      "PublicRoute":  {
                                          "Properties":  {
                                                             "RouteTableId":  {
                                                                                  "Ref":  "PublicRouteTable"
                                                                              },
                                                             "GatewayId":  {
                                                                               "Ref":  "MyInternetGateway"
                                                                           },
                                                             "DestinationCidrBlock":  "0.0.0.0/0"
                                                         },
                                          "DependsOn":  "AttachGateway",
                                          "Type":  "AWS::EC2::Route"
                                      },
                      "PublicSubnet": {
                                               "Properties":  {
                                                                  "AvailabilityZone":  {
                                                                                           "Fn::Join":  [
                                                                                                            "",
                                                                                                            [
                                                                                                                {
                                                                                                                    "Ref":  "AWS::Region"
                                                                                                                },
                                                                                                                "a"
                                                                                                            ]
                                                                                                        ]
                                                                                       },
                                                                  "Tags":  [
                                                                               {
                                                                                   "Key":  "Name",
                                                                                   "Value":  "Assignment_Public_Subnet"
                                                                               }
                                                                           ],
                                                                  "VpcId":  {
                                                                                "Ref":  "VPC"
                                                                            },
                                                                  "CidrBlock":  "10.200.0.0/22"
                                                              },
                                               "Type":  "AWS::EC2::Subnet"
                                           },
                      "InstanceSecurityGroup" : {
													"Type" : "AWS::EC2::SecurityGroup",
																"Properties" : {
																	"GroupDescription" : "Enable SSH access and HTTP from the load balancer only",
																	"SecurityGroupIngress" : [ {
																	"IpProtocol" : "tcp",
																	"FromPort" : "22",
																	"ToPort" : "22",
																	"CidrIp" : { "Ref" : "SSHLocation"}
																	},
																	{
																	"IpProtocol" : "tcp",
																	"FromPort" : "80",
																	"ToPort" : "80",
																	"SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
																	"SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
																	} ]
																}
												},
                      "PublicRouteTable":  {
                                               "Properties":  {
                                                                  "Tags":  [
                                                                               {
                                                                                   "Key":  "Name",
                                                                                   "Value":  "Assignment_RT_PUBLIC"
                                                                               }
                                                                           ],
                                                                  "VpcId":  {
                                                                                "Ref":  "VPC"
                                                                            }
                                                              },
                                               "Type":  "AWS::EC2::RouteTable"
                                           },
                      "PublicSubnetRouteTableAssociation":  {
                                                                "Properties":  {
                                                                                   "SubnetId":  {
                                                                                                    "Ref":  "PublicSubnet"
                                                                                                },
                                                                                   "RouteTableId":  {
                                                                                                        "Ref":  "PublicRouteTable"
                                                                                                    }
                                                                               },
                                                                "Type":  "AWS::EC2::SubnetRouteTableAssociation"
                                                            },
                      "AttachGateway":  {
                                            "Properties":  {
                                                               "InternetGatewayId":  {
                                                                                         "Ref":  "MyInternetGateway"
                                                                                     },
                                                               "VpcId":  {
                                                                             "Ref":  "VPC"
                                                                         }
                                                           },
                                            "Type":  "AWS::EC2::VPCGatewayAttachment"
                                        },
                      "PrivateRouteTable":  {
                                                "Properties":  {
                                                                   "Tags":  [
                                                                                {
                                                                                    "Key":  "Name",
                                                                                    "Value":  "Assignment_RT_PRIVATE"
                                                                                }
                                                                            ],
                                                                   "VpcId":  {
                                                                                 "Ref":  "VPC"
                                                                             }
                                                               },
                                                "Type":  "AWS::EC2::RouteTable"
                                            },
                      "PrivateSubnet":  {
                                                "Properties":  {
                                                                   "AvailabilityZone":  {
                                                                                            "Fn::Join":  [
                                                                                                             "",
                                                                                                             [
                                                                                                                 {
                                                                                                                     "Ref":  "AWS::Region"
                                                                                                                 },
                                                                                                                 "b"
                                                                                                             ]
                                                                                                         ]
                                                                                        },
                                                                   "Tags":  [
                                                                                {
                                                                                    "Key":  "Name",
                                                                                    "Value":  "Assignment_Private_Subnet"
                                                                                }
                                                                            ],
                                                                   "VpcId":  {
                                                                                 "Ref":  "VPC"
                                                                             },
                                                                   "CidrBlock":  "10.200.4.0/22"
                                                               },
                                                "Type":  "AWS::EC2::Subnet"
                                            },
                      "WebServer":  {
                                                   "Properties":  {
                                                                      "BlockDeviceMappings":  [
                                                                                                  {
                                                                                                      "Ebs":  {
                                                                                                                  "VolumeType":  "gp2",
                                                                                                                  "VolumeSize":  "100",
                                                                                                                  "DeleteOnTermination":  "false",
																												  "Encrypted" : "true",
																												  "DeleteOnTermination": "false"
                                                                                                              },
                                                                                                      "DeviceName":  "/dev/sda1"
                                                                                                  },
                                                                                                  {
                                                                                                      "NoDevice":  {

                                                                                                                   },
                                                                                                      "DeviceName":  "/dev/sdk"
                                                                                                  }
                                                                                              ],
                                                                      "InstanceType":  "t2.medium",
                                                                      "DisableApiTermination":  "true",
                                                                      "SecurityGroupIds":  [
                                                                                               {
                                                                                                   "Ref":  "InstanceSecurityGroup"
                                                                                               }
                                                                                           ],
                                                                      "SubnetId":  {
                                                                                       "Ref":  "PrivateSubnet"
                                                                                   },
                                                                      "ImageId":  {
                                                                                      "Fn::FindInMap":  [
                                                                                                            "LinuxRegionMap",
                                                                                                            {
                                                                                                                "Ref":  "AWS::Region"
                                                                                                            },
                                                                                                            "AMI"
                                                                                                        ]
                                                                                  },
                                                                      "InstanceInitiatedShutdownBehavior":  "stop",
                                                                      "UserData":  {
                                                                                       "Fn::Base64":  {
                                                                                                          "Fn::Join":  [
                                                                                                                           "",
                                                                                                                           [
                                                                                                                               "Metadata" : {
																																"Comment1" : "Configure the bootstrap helpers to install the Apache Web Server and PHP",
																																"Comment2" : "Save website content to /var/www/html/index.php",
																														
																																"AWS::CloudFormation::Init" : {
																																"configSets" : {
																																	"Install" : [ "Install" ]
																																},
																														
																																"Install" : {
																																	"packages" : {
																																	"yum" : {
																																		"mysql"        : [],
																																		"mysql-server" : [],
																																		"mysql-libs"   : [],
																																		"httpd"        : [],
																																		"php"          : [],
																																		"php-mysql"    : []
																																	}
																																	},
																														
																																	"files" : {
																																	"/var/www/html/index.php" : {
																																		"content" : { "Fn::Join" : [ "", [
																																		"<html>\n",
																																		"  <head>\n",
																																		"    <title>AWS CloudFormation PHP Sample</title>\n",
																																		"    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
																																		"  </head>\n",
																																		"  <body>\n",
																																		"    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
																																		"    <p/>\n",
																																		"    <?php\n",
																																		"      // Print out the current data and time\n",
																																		"      print \"The Current Date and Time is: <br/>\";\n",
																																		"      print date(\"g:i A l, F j Y.\");\n",
																																		"    ?>\n",
																																		"    <p/>\n",
																																		"    <?php\n",
																																		"      // Setup a handle for CURL\n",
																																		"      $curl_handle=curl_init();\n",
																																		"      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
																																		"      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
																																		"      // Get the hostname of the instance from the instance metadata\n",
																																		"      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
																																		"      $hostname = curl_exec($curl_handle);\n",
																																		"      if (empty($hostname))\n",
																																		"      {\n",
																																		"        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
																																		"      }\n",
																																		"      else\n",
																																		"      {\n",
																																		"        print \"Server = \" . $hostname . \"<br />\";\n",
																																		"      }\n",
																																		"      // Get the instance-id of the instance from the instance metadata\n",
																																		"      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
																																		"      $instanceid = curl_exec($curl_handle);\n",
																																		"      if (empty($instanceid))\n",
																																		"      {\n",
																																		"        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
																																		"      }\n",
																																		"      else\n",
																																		"      {\n",
																																		"        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
																																		"      }\n",
																																		"      $Database   = \"", {"Ref" : "DBName"}, "\";\n",
																																		"      $DBUser     = \"", {"Ref" : "DBUsername"}, "\";\n",
																																		"      $DBPassword = \"", {"Ref" : "DBPassword"}, "\";\n",
																																		"      print \"Database = \" . $Database . \"<br />\";\n",
																																		"      $dbconnection = mysql_connect('localhost', $DBUser, $DBPassword, $Database)\n",
																																		"                      or die(\"Could not connect: \" . mysql_error());\n",
																																		"      print (\"Connected to $Database successfully\");\n",
																																		"      mysql_close($dbconnection);\n",
																																		"    ?>\n",
																																		"    <h2>PHP Information</h2>\n",
																																		"    <p/>\n",
																																		"    <?php\n",
																																		"      phpinfo();\n",
																																		"    ?>\n",
																																		"  </body>\n",
																																		"</html>\n"
																																		]]},
																																		"mode"  : "000600",
																																		"owner" : "apache",
																																		"group" : "apache"
																																	}
																																	},
																																	"services" : {
																																	"sysvinit" : {  
																																		"httpd"   : { "enabled" : "true", "ensureRunning" : "true" }
																																	}
																																	}
																																}
																															},
																															
                                                                                   },
                                                                      "KeyName":  "assignment_ap-southeast-2",
                                                                      "Tags":  [
                                                                                   {
                                                                                       "Key":  "Name",
                                                                                       "Value":  "Assignment_WebServer"
                                                                                   }
                                                                               ]
                                                                  },
                                                   "Type":  "AWS::EC2::Instance"
                                               }}},
                      "MyInternetGateway":  {
                                                "Properties":  {
                                                                   "Tags":  [
                                                                                {
                                                                                    "Key":  "Name",
                                                                                    "Value":  "Assignment_IG"
                                                                                }
                                                                            ]
                                                               },
                                                "Type":  "AWS::EC2::InternetGateway"
                                            },
                      "NAT1":  {
                                   "Properties":  {
                                                      "Tags":  [
                                                                   {
                                                                       "Key":  "Name",
                                                                       "Value":  "NatGateway"
                                                                   }
                                                               ],
                                                      "AllocationId":  {
                                                                           "Fn::GetAtt":  [
                                                                                              "EIP",
                                                                                              "AllocationId"
                                                                                          ]
                                                                       },
                                                      "SubnetId":  {
                                                                       "Ref":  "EnablementSubnet"
                                                                   }
                                                  },
                                   "DependsOn":  "EIP",
                                   "Type":  "AWS::EC2::NatGateway"
                               },
                  },
																					"NotificationTopic": {
																						"Type": "AWS::SNS::Topic",
																						"Properties": {
																							"Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
																						}
																						},
																					
																						"WebServerGroup" : {
																						"Type" : "AWS::AutoScaling::AutoScalingGroup",
																						"Properties" : {
																							"AvailabilityZones" : { "Fn::GetAZs" : ""},
																							"LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
																							"MinSize" : "1",
																							"MaxSize" : "3",
																							"LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
																							"NotificationConfiguration" : {
																							"TopicARN" : { "Ref" : "NotificationTopic" },
																							"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
																													"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
																													"autoscaling:EC2_INSTANCE_TERMINATE",
																													"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
																							}
																						},
																						"CreationPolicy" : {
																							"ResourceSignal" : {
																							"Timeout" : "PT15M",
																							"Count"   : "1"
																							}
																						},
																						"UpdatePolicy": {
																							"AutoScalingRollingUpdate": {
																							"MinInstancesInService": "1",
																							"MaxBatchSize": "1",
																							"PauseTime" : "PT15M",
																							"WaitOnResourceSignals": "true"
																							}
																						}
																						},
																					
																						"LaunchConfig" : {
																						"Type" : "AWS::AutoScaling::LaunchConfiguration",
																						"Metadata" : {
																							"Comment" : "Install a simple application",
																							"AWS::CloudFormation::Init" : {
																							"config" : {
																								"packages" : {
																								"yum" : {
																									"httpd" : []
																								}
																								},
																					
																								"files" : {
																								"/var/www/html/index.html" : {
																									"content" : { "Fn::Join" : ["\n", [
																									"<img src=\"", {"Fn::FindInMap" : ["Region2Examples", {"Ref" : "AWS::Region"}, "Examples"]}, "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
																									"<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
																									]]},
																									"mode"    : "000644",
																									"owner"   : "root",
																									"group"   : "root"
																								},
																					
																								"/etc/cfn/cfn-hup.conf" : {
																									"content" : { "Fn::Join" : ["", [
																									"[main]\n",
																									"stack=", { "Ref" : "AWS::StackId" }, "\n",
																									"region=", { "Ref" : "AWS::Region" }, "\n"
																									]]},
																									"mode"    : "000400",
																									"owner"   : "root",
																									"group"   : "root"
																								},
																					
																								"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
																									"content": { "Fn::Join" : ["", [
																									"[cfn-auto-reloader-hook]\n",
																									"triggers=post.update\n",
																									"path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
																									"action=/opt/aws/bin/cfn-init -v ",
																									"         --stack ", { "Ref" : "AWS::StackName" },
																									"         --resource LaunchConfig ",
																									"         --region ", { "Ref" : "AWS::Region" }, "\n",
																									"runas=root\n"
																									]]}
																								}
																								},
																					
																								"services" : {
																								"sysvinit" : {
																									"httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
																									"cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
																												"files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
																								}
																								}
																							}
																							}
																						},
																						"Properties" : {
																							"KeyName" : { "Ref" : "KeyName" },
																							"ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
																															{ "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
																							"SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
																							"InstanceType" : { "Ref" : "InstanceType" },
																							"UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
																								"#!/bin/bash -xe\n",
																								"yum update -y aws-cfn-bootstrap\n",
																					
																								"/opt/aws/bin/cfn-init -v ",
																								"         --stack ", { "Ref" : "AWS::StackName" },
																								"         --resource LaunchConfig ",
																								"         --region ", { "Ref" : "AWS::Region" }, "\n",
																					
																								"/opt/aws/bin/cfn-signal -e $? ",
																								"         --stack ", { "Ref" : "AWS::StackName" },
																								"         --resource WebServerGroup ",
																								"         --region ", { "Ref" : "AWS::Region" }, "\n"
																							]]}}
																						}
																						},
																					
																						"WebServerScaleUpPolicy" : {
																						"Type" : "AWS::AutoScaling::ScalingPolicy",
																						"Properties" : {
																							"AdjustmentType" : "ChangeInCapacity",
																							"AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
																							"Cooldown" : "60",
																							"ScalingAdjustment" : "1"
																						}
																						},
																						"WebServerScaleDownPolicy" : {
																						"Type" : "AWS::AutoScaling::ScalingPolicy",
																						"Properties" : {
																							"AdjustmentType" : "ChangeInCapacity",
																							"AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
																							"Cooldown" : "60",
																							"ScalingAdjustment" : "-1"
																						}
																						},
																					
																						"CPUAlarmHigh": {
																						"Type": "AWS::CloudWatch::Alarm",
																						"Properties": {
																							"AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
																							"MetricName": "CPUUtilization",
																							"Namespace": "AWS/EC2",
																							"Statistic": "Average",
																							"Period": "300",
																							"EvaluationPeriods": "2",
																							"Threshold": "90",
																							"AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
																							"Dimensions": [
																							{
																								"Name": "AutoScalingGroupName",
																								"Value": { "Ref": "WebServerGroup" }
																							}
																							],
																							"ComparisonOperator": "GreaterThanThreshold"
																						}
																						},
																						"CPUAlarmLow": {
																						"Type": "AWS::CloudWatch::Alarm",
																						"Properties": {
																							"AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
																							"MetricName": "CPUUtilization",
																							"Namespace": "AWS/EC2",
																							"Statistic": "Average",
																							"Period": "300",
																							"EvaluationPeriods": "2",
																							"Threshold": "70",
																							"AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
																							"Dimensions": [
																							{
																								"Name": "AutoScalingGroupName",
																								"Value": { "Ref": "WebServerGroup" }
																							}
																							],
																							"ComparisonOperator": "LessThanThreshold"
																						}
																						},
																					
																						"ElasticLoadBalancer" : {
																						"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
																						"Properties" : {
																							"AvailabilityZones" : { "Fn::GetAZs" : "" },
																							"CrossZone" : "true",
																							"Listeners" : [ {
																							"LoadBalancerPort" : "80",
																							"InstancePort" : "80",
																							"Protocol" : "HTTP"
																							} ],
																							"HealthCheck" : {
																							"Target" : "HTTP:80/",
																							"HealthyThreshold" : "3",
																							"UnhealthyThreshold" : "5",
																							"Interval" : "30",
																							"Timeout" : "5"
																							}
																						}
																						},
																					
																						"InstanceSecurityGroup" : {
																						"Type" : "AWS::EC2::SecurityGroup",
																						"Properties" : {
																							"GroupDescription" : "Enable SSH access and HTTP from the load balancer only",
																							"SecurityGroupIngress" : [ {
																							"IpProtocol" : "tcp",
																							"FromPort" : "22",
																							"ToPort" : "22",
																							"CidrIp" : { "Ref" : "SSHLocation"}
																							},
																							{
																							"IpProtocol" : "tcp",
																							"FromPort" : "80",
																							"ToPort" : "80",
																							"SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
																							"SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
																							} ]
																						}
																						}
																					},
																					
																					"Outputs" : {
																						"URL" : {
																						"Description" : "The URL of the website",
																						"Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
																						}
																					},
    "Description":  "AWS CloudFormation template. Creates a VPC, Public and Private subnets, routing, security groups and instances",
    "AWSTemplateFormatVersion":  "2010-09-09",
    "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "HVM64"  },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "HVM64"  },
      "m1.medium"   : { "Arch" : "HVM64"  },
      "m1.large"    : { "Arch" : "HVM64"  },
      "m1.xlarge"   : { "Arch" : "HVM64"  },
      "m2.xlarge"   : { "Arch" : "HVM64"  },
      "m2.2xlarge"  : { "Arch" : "HVM64"  },
      "m2.4xlarge"  : { "Arch" : "HVM64"  },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "HVM64"  },
      "c1.xlarge"   : { "Arch" : "HVM64"  },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "g2.8xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t1.micro"    : { "Arch" : "NATHVM64"  },
      "t2.nano"     : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  },
      "m1.small"    : { "Arch" : "NATHVM64"  },
      "m1.medium"   : { "Arch" : "NATHVM64"  },
      "m1.large"    : { "Arch" : "NATHVM64"  },
      "m1.xlarge"   : { "Arch" : "NATHVM64"  },
      "m2.xlarge"   : { "Arch" : "NATHVM64"  },
      "m2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m3.medium"   : { "Arch" : "NATHVM64"  },
      "m3.large"    : { "Arch" : "NATHVM64"  },
      "m3.xlarge"   : { "Arch" : "NATHVM64"  },
      "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.large"    : { "Arch" : "NATHVM64"  },
      "m4.xlarge"   : { "Arch" : "NATHVM64"  },
      "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.10xlarge" : { "Arch" : "NATHVM64"  },
      "c1.medium"   : { "Arch" : "NATHVM64"  },
      "c1.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.large"    : { "Arch" : "NATHVM64"  },
      "c3.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.large"    : { "Arch" : "NATHVM64"  },
      "c4.xlarge"   : { "Arch" : "NATHVM64"  },
      "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
      "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
      "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
      "r3.large"    : { "Arch" : "NATHVM64"  },
      "r3.xlarge"   : { "Arch" : "NATHVM64"  },
      "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.xlarge"   : { "Arch" : "NATHVM64"  },
      "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.xlarge"   : { "Arch" : "NATHVM64"  },
      "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
      "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
    }
,
    "AWSRegionArch2AMI" : {      
      "ap-southeast-2"   : {"HVM64" : "ami-0673ea45016d6e604", "HVMG2" : "ami-076a5bf4a712000ed"}
      
    }

}
